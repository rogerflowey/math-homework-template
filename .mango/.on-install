#!/usr/bin/env bash
set -euo pipefail

repo_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
mango_dir="$repo_root/.mango"
venv_path="$mango_dir/venv"
declare -a font_targets=(
	"$HOME/.local/share/fonts/sourcehan"
	"$mango_dir/fonts/sourcehan"
)
primary_font_dir="${font_targets[0]}"

ensure_font_dirs() {
	local dir
	for dir in "${font_targets[@]}"; do
		mkdir -p "$dir"
	done
}

copy_font_to_targets() {
	local src="$1"
	local basename
	basename="$(basename "$src")"
	local copied=0
	local primary_copied=0
	local dir
	for dir in "${font_targets[@]}"; do
		local dest="$dir/$basename"
		if [[ -e "$dest" && "$src" -ef "$dest" ]]; then
			copied=1
			[[ "$dir" == "$primary_font_dir" ]] && primary_copied=1
			continue
		fi
		if install -m644 "$src" "$dest" 2>/dev/null || cp "$src" "$dest" 2>/dev/null; then
			copied=1
			[[ "$dir" == "$primary_font_dir" ]] && primary_copied=1
		else
			echo "Warning: Unable to install $basename into $dir" >&2
		fi
	done
	if (( primary_copied == 1 )); then
		return 0
	fi
	if (( copied == 1 )); then
		echo "Warning: Installed $basename outside of $primary_font_dir; XeLaTeX may still be unable to locate it." >&2
	fi
	return 1
}

refresh_font_cache() {
	if ! command -v fc-cache >/dev/null 2>&1; then
		return 0
	fi
	local dir
	for dir in "${font_targets[@]}"; do
		fc-cache -f "$dir" >/dev/null 2>&1 || true
	done
	fc-cache -f >/dev/null 2>&1 || true
}

ensure_font_dirs

# Check Python version
python_version=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
required_version="3.8"

if [ "$(printf '%s\n' "$required_version" "$python_version" | sort -V | head -n1)" != "$required_version" ]; then
    echo "Error: Python $required_version or higher is required. Found $python_version"
    exit 1
fi

if [[ ! -d "$venv_path" ]]; then
	echo "Creating virtual environment..."
	python3 -m venv "$venv_path"
fi

source "$venv_path/bin/activate"
echo "Upgrading pip..."
pip install --upgrade pip
echo "Installing dependencies..."
pip install -r "$repo_root/requirements.txt"
echo "Installation complete!"

# Copy template preamble into user repo for convenience.
if [[ -n "${MANGO_REPO_PATH:-}" ]]; then
	if [[ -f "$repo_root/preamble.tex" ]]; then
		cp "$repo_root/preamble.tex" "$MANGO_REPO_PATH/"
		echo "Copied preamble.tex to $MANGO_REPO_PATH"
	else
		echo "Warning: preamble.tex not found at $repo_root" >&2
	fi
else
	echo "Warning: MANGO_REPO_PATH is not set; skipping preamble copy." >&2
fi

echo "Checking TeX Live packages..."
if command -v kpsewhich >/dev/null 2>&1; then
	source_han_fonts_available() {
		local serif_ready=0
		local sans_ready=0
		local -a source_han_files=(
			SourceHanSerifSC-Regular.otf
			SourceHanSerifSC-Bold.otf
			SourceHanSansSC-Regular.otf
			SourceHanSansSC-Bold.otf
		)

		if command -v fc-list >/dev/null 2>&1; then
			fc-list | grep -qi 'Source Han Serif SC' && serif_ready=1 || true
			fc-list | grep -qi 'Source Han Sans SC' && sans_ready=1 || true
		fi

		if (( serif_ready == 0 || sans_ready == 0 )); then
			[[ -f "$primary_font_dir/SourceHanSerifSC-Regular.otf" ]] && serif_ready=1 || true
			[[ -f "$primary_font_dir/SourceHanSansSC-Regular.otf" ]] && sans_ready=1 || true
		fi

		if (( serif_ready == 0 || sans_ready == 0 )); then
			for _font in "${source_han_files[@]}"; do
				if kpsewhich "$_font" >/dev/null 2>&1; then
					case "$_font" in
						SourceHanSerifSC-*) serif_ready=1 ;;
						SourceHanSansSC-*) sans_ready=1 ;;
					esac
				fi
			done
		fi

		if (( serif_ready == 1 && sans_ready == 1 )); then
			return 0
		fi
		return 1
	}

	download_source_han_fonts() {
		local tmp_dir
		tmp_dir=$(mktemp -d 2>/dev/null || mktemp -d -t sourcehan)
		if [[ ! -d "$tmp_dir" ]]; then
			echo "Warning: Unable to create temporary directory for Source Han fonts download." >&2
			return 1
		fi

		local downloader=""
		if command -v curl >/dev/null 2>&1; then
			downloader="curl"
		elif command -v wget >/dev/null 2>&1; then
			downloader="wget"
		else
			echo "Warning: Source Han fonts missing and neither curl nor wget is available for download." >&2
			rm -rf "$tmp_dir"
			return 1
		fi

		local unarchiver=""
		if command -v unzip >/dev/null 2>&1; then
			unarchiver="unzip"
		elif command -v bsdtar >/dev/null 2>&1; then
			unarchiver="bsdtar"
		else
			echo "Warning: Source Han fonts missing and neither unzip nor bsdtar is available to extract archives." >&2
			rm -rf "$tmp_dir"
			return 1
		fi

		declare -A archives=(
			[sans]="https://github.com/adobe-fonts/source-han-sans/releases/download/2.004R/SourceHanSansSC.zip"
			[serif]="https://github.com/adobe-fonts/source-han-serif/releases/download/2.001R/09_SourceHanSerifSC.zip"
		)

		local fetched=0
		local family
		for family in "${!archives[@]}"; do
			local url="${archives[$family]}"
			local archive_path="$tmp_dir/${family}.zip"
			local family_label
			case "$family" in
				sans) family_label="Sans" ;;
				serif) family_label="Serif" ;;
				*) family_label="$family" ;;
			esac

			echo "Downloading Source Han ${family_label} fonts..."
			if [[ "$downloader" == "curl" ]]; then
				if ! curl -fL --retry 3 --retry-delay 2 -o "$archive_path" "$url"; then
					echo "Warning: Failed to download $url" >&2
					continue
				fi
			else
				if ! wget --quiet --tries=3 --waitretry=2 --retry-connrefused -O "$archive_path" "$url"; then
					echo "Warning: Failed to download $url" >&2
					continue
				fi
			fi

			if [[ ! -s "$archive_path" ]]; then
				echo "Warning: Downloaded archive $archive_path is empty." >&2
				continue
			fi

			local extract_dir="$tmp_dir/${family}-extract"
			mkdir -p "$extract_dir"
			if [[ "$unarchiver" == "unzip" ]]; then
				if ! unzip -q "$archive_path" -d "$extract_dir"; then
					echo "Warning: Failed to extract $archive_path" >&2
					continue
				fi
			else
				if ! bsdtar -xf "$archive_path" -C "$extract_dir"; then
					echo "Warning: Failed to extract $archive_path" >&2
					continue
				fi
			fi

			local -a targets
			case "$family" in
				sans) targets=(SourceHanSansSC-Regular.otf SourceHanSansSC-Bold.otf) ;;
				serif) targets=(SourceHanSerifSC-Regular.otf SourceHanSerifSC-Bold.otf) ;;
				*) targets=() ;;
			esac

			local copied_any=0
			local _font
			for _font in "${targets[@]}"; do
				local found
				found=$(find "$extract_dir" -type f -name "$_font" -print -quit 2>/dev/null || true)
				if [[ -n "$found" ]]; then
					if copy_font_to_targets "$found"; then
						copied_any=1
						fetched=1
					fi
				else
					echo "Warning: Did not locate $_font in the downloaded Source Han ${family_label} archive." >&2
				fi
			done

			if (( copied_any == 0 )); then
				echo "Warning: No Source Han ${family_label} fonts were copied from the downloaded archive." >&2
			fi
		done

		rm -rf "$tmp_dir"

		if (( fetched == 1 )); then
			refresh_font_cache
			return 0
		fi

		return 1
	}

	ensure_source_han_fonts() {
		local -a source_han_files=(
			SourceHanSerifSC-Regular.otf
			SourceHanSerifSC-Bold.otf
			SourceHanSansSC-Regular.otf
			SourceHanSansSC-Bold.otf
		)

		locate_font_source() {
			local target="$1"
			local candidate
			local dir
			for dir in "${font_targets[@]}"; do
				candidate="$dir/$target"
				if [[ -f "$candidate" ]]; then
					echo "$candidate"
					return 0
				fi
			done

			if command -v fc-list >/dev/null 2>&1; then
				candidate=$(fc-list ":file=$target" -f '%{file}\n' 2>/dev/null | head -n1 || true)
				if [[ -n "$candidate" ]]; then
					echo "$candidate"
					return 0
				fi
			fi

			candidate=$(kpsewhich "$target" 2>/dev/null || true)
			if [[ -n "$candidate" ]]; then
				echo "$candidate"
				return 0
			fi

			return 1
		}

		ensure_project_font_cache() {
			local project_cache="$mango_dir/fonts/sourcehan"
			local -a required_fonts=(
				SourceHanSerifSC-Regular.otf
				SourceHanSerifSC-Bold.otf
				SourceHanSansSC-Regular.otf
				SourceHanSansSC-Bold.otf
			)
			local font
			local missing=0
			for font in "${required_fonts[@]}"; do
				if [[ ! -f "$project_cache/$font" ]]; then
					missing=1
					break
				fi
			done

			if (( missing == 0 )); then
				return 0
			fi

			local sourced_any=0
			for font in "${required_fonts[@]}"; do
				if [[ -f "$project_cache/$font" ]]; then
					continue
				fi
				local source_path
				source_path=$(locate_font_source "$font" || true)
				if [[ -n "$source_path" ]]; then
					if copy_font_to_targets "$source_path"; then
						sourced_any=1
					fi
				fi
			done

			if (( sourced_any == 0 )); then
				echo "Attempting to download Source Han fonts for project cache..."
				download_source_han_fonts || true
			fi

			local missing_after=0
			for font in "${required_fonts[@]}"; do
				if [[ ! -f "$project_cache/$font" ]]; then
					missing_after=1
				fi
			done

			if (( missing_after == 0 )); then
				refresh_font_cache
				return 0
			fi

			echo "Warning: Source Han fonts could not be staged under $project_cache." >&2
			return 1
		}

		if source_han_fonts_available; then
			ensure_project_font_cache || true
			echo "Source Han fonts detected."
			return 0
		fi

		local install_attempted=0
		if command -v tlmgr >/dev/null 2>&1; then
			echo "Installing Source Han fonts via tlmgr..."
			install_attempted=1
			if ! tlmgr install sourcehan sourcehan-serif sourcehan-sans >/dev/null 2>&1; then
				echo "Warning: tlmgr failed to install Source Han fonts." >&2
			fi
		fi

		if ! source_han_fonts_available && command -v apt-get >/dev/null 2>&1; then
			if command -v sudo >/dev/null 2>&1 && sudo -n true 2>/dev/null; then
				local -a apt_packages=(fonts-source-han-sans fonts-source-han-serif)
				echo "Attempting to install Source Han fonts via apt (${apt_packages[*]})..."
				install_attempted=1
				if sudo apt-get update && sudo apt-get install -y "${apt_packages[@]}"; then
					refresh_font_cache
				else
					echo "Warning: apt installation of Source Han fonts failed or packages unavailable." >&2
				fi
			else
				echo "Warning: Source Han fonts missing and sudo access unavailable for apt installation." >&2
			fi
		fi

		if ! source_han_fonts_available; then
			local copied_from_texmf=0
			local _font
			for _font in "${source_han_files[@]}"; do
				local font_path
				font_path=$(kpsewhich "$_font" 2>/dev/null || true)
				if [[ -n "$font_path" && -f "$font_path" ]]; then
					if copy_font_to_targets "$font_path"; then
						copied_from_texmf=1
					fi
				fi
			done

			if (( copied_from_texmf == 1 )); then
				refresh_font_cache
			fi

			if source_han_fonts_available; then
				ensure_project_font_cache || true
				echo "Source Han fonts are ready for XeLaTeX."
				return 0
			fi

			install_attempted=1
			download_source_han_fonts || true

			if source_han_fonts_available; then
				ensure_project_font_cache || true
				echo "Source Han fonts are ready for XeLaTeX."
				return 0
			fi
		fi

		if (( install_attempted == 0 )); then
			echo "Warning: Source Han fonts are missing and no automatic installation was attempted." >&2
		else
			echo "Warning: Source Han fonts remain unavailable after installation attempts." >&2
		fi
		echo "Install Source Han Serif/Sans SC fonts manually so XeLaTeX can locate them." >&2
		return 1
	}

	ensure_source_han_fonts || true

	declare -a missing_tex_packages=()
	while IFS=: read -r pkg sty; do
		[[ -z "$pkg" || -z "$sty" ]] && continue
		if ! kpsewhich "$sty" >/dev/null 2>&1; then
			missing_tex_packages+=("$pkg")
		fi
	done <<'EOF'
adjustbox:adjustbox.sty
tabularray:tabularray.sty
physics:physics.sty
pgfplots:pgfplots.sty
pgf:tikz.sty
tikz-3dplot:tikz-3dplot.sty
mathrsfs:mathrsfs.sty
titlesec:titlesec.sty
fancyhdr:fancyhdr.sty
setspace:setspace.sty
enumitem:enumitem.sty
geometry:geometry.sty
wrapfig:wrapfig.sty
etoolbox:etoolbox.sty
multirow:multirow.sty
hyperref:hyperref.sty
mathtools:mathtools.sty
XCharter:XCharter.sty
unicode-math:unicode-math.sty
xeCJK:xeCJK.sty
EOF

    if (( ${#missing_tex_packages[@]} > 0 )); then
        if command -v tlmgr >/dev/null 2>&1; then
            echo "Installing missing TeX packages via tlmgr: ${missing_tex_packages[*]}"
            tlmgr install "${missing_tex_packages[@]}"
        else
            echo "Warning: Missing TeX packages detected (${missing_tex_packages[*]}), but tlmgr is not available." >&2
            echo "Please install them using your TeX distribution's package manager." >&2
        fi
    else
        echo "All required TeX packages are present."
    fi
else
	echo "Warning: kpsewhich not found; skipping TeX package checks." >&2
fi

